import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;

import javax.swing.JOptionPane;
import java.util.Timer;
import java.util.TimerTask;

public class RealizarVida
{

  public static void main(String args [])
  {
     JFrame tela = new JFrame();
     Painel painel = new Painel();
     painel.addMouseListener(painel);
     tela.setResizable(false);
     tela.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     tela.add(painel);
     tela.setSize(1001,1001);
     tela.setLocation(500,100);
     tela.setVisible(true);

  }

}

class Vida
{
     static final int VAZIO = 0;
     static final int OCUPADO = 1;
     int numCol;
     int numLin;
     int [][] elementos;

     Vida(int numCol, int numLin)
     {
        this.numCol=numCol;
        this.numLin=numLin;
        elementos = new int [this.numCol][this.numLin];
     }

     Vida()
     {
        this(100,100);
     }

     int getCol()
     {
        return(this.numCol);
     }
     int getLin()
     {
        return(this.numLin);
     }
     
     void setLength(int numCol, int numLin)
     {
      this.numCol=numCol;
      this.numLin=numLin;
      elementos = new int [this.numCol][this.numLin];
      this.clear();
     }

     void clear()
     {
       for(int i=0;i<numCol;i++)
          for(int j=0;j<numLin;j++)
             elementos[i][j]=Vida.VAZIO;

     }


     void setOcupado(int col, int lin)
     {
        elementos[col][lin]=Vida.OCUPADO;
     }
     void setVazio(int col, int lin)
     {
        elementos[col][lin]=Vida.VAZIO;
     }

     void setTrocar(int col, int lin)
     {
        if (elementos[col][lin]==Vida.VAZIO) elementos[col][lin]=Vida.OCUPADO;
          else
            if (elementos[col][lin]==Vida.OCUPADO) elementos[col][lin]=Vida.VAZIO;
     }


     int getSituacao(int col, int lin)
     {
        return elementos[col][lin];
     }

     void executarUmPasso()
     {
       int numVizinhos=0,colAnt,linAnt,colPos,linPos;
       int [][] elementosNovos = new int [this.numCol][this.numLin];
      // System.out.println("----------------------------");
       for(int i=0;i<numCol;i++)
          for(int j=0;j<numLin;j++)
          {
             numVizinhos=0;
             colAnt=(numCol+i-1) % numCol;
             linAnt=(numLin+j-1) % numLin;
             colPos=(i+1)%this.numCol;
             linPos=(j+1)%this.numLin;
             //OCUPADO tem que ser igual a 1.
             numVizinhos=elementos[colAnt][j]+elementos[colAnt][linAnt]+elementos[colAnt][linPos];
             numVizinhos+=elementos[colPos][j]+elementos[colPos][linAnt]+elementos[colPos][linPos];
             numVizinhos+=elementos[i][linAnt]+elementos[i][linPos];
             //if (numVizinhos>0) System.out.println(i +  " " + j + " " + numVizinhos);
             elementosNovos[i][j]=elementos[i][j];
             if ((elementos[i][j]==OCUPADO) && (numVizinhos<2)) elementosNovos[i][j]=VAZIO;
               else if ((elementos[i][j]==OCUPADO) && (numVizinhos>3)) elementosNovos[i][j]=VAZIO;
                 else if ((elementos[i][j]==VAZIO  ) && (numVizinhos==3)) elementosNovos[i][j]=OCUPADO;

          }     
       elementos = elementosNovos;

     }

}



class Painel extends JPanel implements MouseListener
{
    
   int a = 0;
   int n=-1, m=-1;
   
   double altura, largura;
   Vida tabuleiro = new Vida(100,100);



   public void paintComponent(Graphics g)
   {
     super.paintComponent(g);
     int numCol = tabuleiro.getCol();
     Color COR_VAZIO = Color.white;
     Color COR_OCUPADO = Color.blue;
     Color COR_LINHA = Color.gray;

     int numLin= tabuleiro.getLin();
     int width =  getWidth();
     int height = getHeight();
     largura =(double) width / (double) numCol; 
     altura = (double) height / (double) numLin;
     

     for(int i=0; i<numCol; i++)
        for(int j=0; j<numLin; j++)
         {
            if (tabuleiro.getSituacao(i,j)==Vida.VAZIO)
               g.setColor(COR_VAZIO);
            else
               g.setColor(COR_OCUPADO);
   
               //g.setColor(Color.BLUE);
            g.fillRect( (int) (i*largura), (int) (j*altura), (int) (largura), (int) (altura) );

         }
     g.setColor(COR_LINHA);
    for(int i=0; i<=numCol; i++)
       g.drawLine( (int) (i*largura),0 ,(int)(i*largura),(int) (numLin*altura));
     for(int i=0; i<=numLin; i++)
      g.drawLine(0 , (int) (i*altura)  ,(int) (numCol*largura)  ,(int) (i*altura) );
   }



    public void mouseClicked(MouseEvent e)
    { 
     
      if (e.getButton()==MouseEvent.BUTTON1) 
      {   
        n =  (int)( (double) e.getX() / largura);
        m = (int) ((double) e.getY() / altura);
        tabuleiro.setTrocar(n,m);         
      };
      if (e.getButton()==MouseEvent.BUTTON3) 
      {   
        tabuleiro.executarUmPasso();   
        new Execucao(100);
      }; 
      this.repaint();
      
    }
     
    public void mouseEntered(MouseEvent e) {}
 
    public void mouseExited(MouseEvent e) {}
 
    public void mousePressed(MouseEvent e) {}
 
    public void mouseReleased(MouseEvent e) {}
     
    public class Execucao 
    {
       Timer temporizador;

       public Execucao(int milisegundos)
       {
          temporizador = new Timer();
          temporizador.schedule(new UmPasso(),0,milisegundos);

       }
       class UmPasso extends TimerTask 
       {
            public void run() 
            {
              System.out.println("Time's up!");
              //temporizador.cancel(); //Terminate the timer thread
              tabuleiro.executarUmPasso();
              repaint();
            }
        }
    }


}


//http://www.dsc.ufcg.edu.br/~jacques/cursos/map/html/threads/timer.html




